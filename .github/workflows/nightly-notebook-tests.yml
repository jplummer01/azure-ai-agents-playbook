name: Nightly Notebook Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
    inputs:
      timeout:
        description: 'Timeout in seconds for each notebook'
        required: false
        default: '900'
        type: string
      output_format:
        description: 'Output format for results'
        required: false
        default: 'json'
        type: choice
        options:
        - console
        - json
        - html

jobs:
  test-notebooks:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours max for entire job
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify installation
      run: |
        python --version
        pip list | grep -E "(notebook|nbconvert|nbformat)"
    
    - name: Set up environment variables
      run: |
        # Create a .env file with placeholder values for testing
        echo "AZURE_OPENAI_API_KEY=placeholder" >> .env
        echo "AZURE_OPENAI_ENDPOINT=https://placeholder.openai.azure.com/" >> .env
        echo "AZURE_OPENAI_API_VERSION=2024-05-01-preview" >> .env
        echo "AZURE_CLIENT_ID=placeholder" >> .env
        echo "AZURE_CLIENT_SECRET=placeholder" >> .env
        echo "AZURE_TENANT_ID=placeholder" >> .env
        echo "AZURE_SUBSCRIPTION_ID=placeholder" >> .env
    
    - name: Run notebook tests
      id: notebook_tests
      run: |
        TIMEOUT="${{ github.event.inputs.timeout || '900' }}"
        OUTPUT_FORMAT="${{ github.event.inputs.output_format || 'json' }}"
        
        echo "Running notebook tests with timeout=${TIMEOUT}s and format=${OUTPUT_FORMAT}"
        python notebook_test_runner.py \
          --timeout "${TIMEOUT}" \
          --output-format "${OUTPUT_FORMAT}" \
          --root-path .
      continue-on-error: true  # Don't fail the job immediately
    
    - name: Check test results
      id: check_results
      run: |
        if [ -f "notebook_test_results.json" ]; then
          echo "Test results file found"
          # Extract summary information
          TOTAL=$(jq '.summary.total_notebooks' notebook_test_results.json)
          SUCCESSFUL=$(jq '.summary.successful' notebook_test_results.json)
          FAILED=$(jq '.summary.failed' notebook_test_results.json)
          ERRORS=$(jq '.summary.errors' notebook_test_results.json)
          
          echo "total_notebooks=${TOTAL}" >> $GITHUB_OUTPUT
          echo "successful=${SUCCESSFUL}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED}" >> $GITHUB_OUTPUT
          echo "errors=${ERRORS}" >> $GITHUB_OUTPUT
          
          # Set overall status
          if [ "${FAILED}" -eq 0 ] && [ "${ERRORS}" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
        else
          echo "No test results file found"
          echo "status=unknown" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: notebook-test-results-${{ github.run_number }}
        path: |
          notebook_test_results.json
          notebook_test_results.html
          notebook_test_runner.log
        retention-days: 30
    
    - name: Create job summary
      if: always()
      run: |
        echo "# üìä Notebook Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "notebook_test_results.json" ]; then
          TOTAL=$(jq '.summary.total_notebooks' notebook_test_results.json)
          SUCCESSFUL=$(jq '.summary.successful' notebook_test_results.json)
          FAILED=$(jq '.summary.failed' notebook_test_results.json)
          ERRORS=$(jq '.summary.errors' notebook_test_results.json)
          EXECUTION_TIME=$(jq '.summary.total_execution_time' notebook_test_results.json)
          
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "- üìù **Total notebooks:** ${TOTAL}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Successful:** ${SUCCESSFUL}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **Failed:** ${FAILED}" >> $GITHUB_STEP_SUMMARY
          echo "- üí• **Errors:** ${ERRORS}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚è±Ô∏è **Total execution time:** ${EXECUTION_TIME} seconds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Detailed Results" >> $GITHUB_STEP_SUMMARY
          echo "| Notebook | Status | Execution Time | Cells |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|----------------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Extract detailed results using jq
          jq -r '.results[] | "| \(.notebook) | \(.status) | \(.execution_time)s | \(.cells_executed)/\(.total_cells) |"' notebook_test_results.json >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **No test results available**" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          if (!fs.existsSync('notebook_test_results.json')) {
            return;
          }
          
          const results = JSON.parse(fs.readFileSync('notebook_test_results.json', 'utf8'));
          const summary = results.summary;
          
          const statusIcon = summary.overall_status === 'success' ? '‚úÖ' : '‚ùå';
          
          const comment = `
          ## ${statusIcon} Notebook Test Results
          
          **Summary:**
          - üìù Total notebooks: ${summary.total_notebooks}
          - ‚úÖ Successful: ${summary.successful}
          - ‚ùå Failed: ${summary.failed}
          - üí• Errors: ${summary.errors}
          - ‚è±Ô∏è Total execution time: ${summary.total_execution_time}s
          
          <details>
          <summary>üìã Detailed Results</summary>
          
          | Notebook | Status | Time | Cells |
          |----------|--------|------|-------|
          ${results.results.map(r => `| ${r.notebook} | ${r.status} | ${r.execution_time}s | ${r.cells_executed}/${r.total_cells} |`).join('\n')}
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail job if tests failed
      if: steps.check_results.outputs.status == 'failure'
      run: |
        echo "‚ùå Some notebooks failed to execute successfully"
        echo "Failed: ${{ steps.check_results.outputs.failed }}"
        echo "Errors: ${{ steps.check_results.outputs.errors }}"
        exit 1

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: test-notebooks
    if: failure() && github.event_name == 'schedule'
    
    steps:
    - name: Send notification
      run: |
        echo "üö® Nightly notebook tests failed!"
        echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        # Add additional notification logic here (email, Slack, Teams, etc.)
